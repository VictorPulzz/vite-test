query FetchProjectDetails($data: IDInput!) {
  project(data: $data) {
    id
    name
    createdAt
    createdBy {
      fullName
    }
    status
    startDate
    endDate
    phase
    design
    roadmap
    notes
    clientTeam {
      fullName
      email
      phone
      position
      notes
      pointContact
    }
  }
}

query FetchAllUsers($filters: UserFilter, $pagination: PaginationInput!, $search: String) {
  usersList(filters: $filters, pagination: $pagination, search: $search) {
    results {
      id
      photo {
        url
      }
      fullName
      role {
        name
      }
      email
    }
  }
}

query FetchProjectMembers($data: IDInput!) {
  projectMemberList(data: $data) {
    currentTeam {
      id
      photo {
        url
      }
      fullName
      role {
        name
      }
      email
    }
    otherContrubutors {
      id
      photo {
        url
      }
      fullName
      role {
        name
      }
      email
    }
  }
}

mutation AddProjectMember($input: ProjectMemberInput!) {
  projectAddMember(data: $input) {
    currentTeam
    project {
      name
    }
    user {
      fullName
    }
  }
}

mutation RemoveProjectMember($input: ProjectMemberInput!) {
  projectDeleteMember(data: $input) {
    message
  }
}

query FetchProjectRepositoriesList($data: IDInput!) {
  projectRepositoryList(data: $data) {
    id
    name
    type
    platform
    createdAt
  }
}

mutation RequestNewProjectRepository($input: RepositoryInput!) {
  repositoryCreateUpdate(data: $input) {
    platform
    type
  }
}

query FetchProjectEnvironmentsList($data: IDInput!) {
  projectEnvironmentList(data: $data) {
    id
    projectId
    name
    frontendCredentials {
      url
      login
      password
    }
    backendCredentials {
      url
      login
      password
    }
  }
}

mutation RequestNewProjectEnvironment($input: ProjectEnvironmentInput!) {
  projectEnvironmentCreateUpdate(data: $input) {
    name
  }
}

query FetchProjectIntegrationsList($data: IDInput!) {
  projectIntegrationList(data: $data) {
    id
    name
    projectId
    credentials {
      url
      login
      password
      key
      name
    }
  }
}

mutation RequestNewProjectIntegration($input: ProjectIntegrationInput!) {
  projectIntegrationCreateUpdate(data: $input) {
    name
  }
}
