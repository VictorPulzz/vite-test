query FetchProjectPreview($data: IDInput!) {
  projectPreview(data: $data) {
    id
    name
    createdAt
    createdBy {
      fullName
    }
    inTeam
  }
}

query FetchProjectInfo($data: IDInput!) {
  project(data: $data) {
    id
    name
    createdAt
    createdBy {
      fullName
    }
    status {
      id
      name
    }
    startDate
    endDate
    phase
    design
    roadmap
    notes
    clientTeam {
      fullName
      email
      phone
      position
      notes
      pointContact
    }
    platforms {
      id
      name
    }
  }
}

query FetchProjectMembers($data: IDInput!) {
  projectMemberList(data: $data) {
    currentTeam {
      startDate
      endDate
      user {
        id
        photo {
          url
        }
        fullName
        role {
          name
        }
        email
        slackUrl
      }
    }
    otherContrubutors {
      startDate
      endDate
      user {
        id
        photo {
          url
        }
        fullName
        role {
          name
        }
        email
        slackUrl
      }
    }
  }
}

mutation AddProjectMember($input: ProjectMemberInput!) {
  projectAddMember(data: $input) {
    currentTeam
    project {
      name
    }
    user {
      fullName
    }
  }
}

mutation RemoveProjectMember($input: ProjectMemberInput!) {
  projectDeleteMember(data: $input) {
    message
  }
}

query FetchProjectRepositoriesList($data: IDInput!) {
  projectRepositoryList(data: $data) {
    projectInGit
    projectRepositories {
      id
      name
      type
      technologies {
        id
        name
      }
      createdAt
    }
  }
}

query FetchReposRequestsList(
  $filters: RequestFilter
  $pagination: PaginationInput
  $sort: [RequestSortFieldInput!]
) {
  requestList(filters: $filters, pagination: $pagination, sort: $sort) {
    results {
      id
      repositoryType
      technologies {
        id
        name
      }
      createdAt
    }
  }
}

mutation RequestNewProjectRepository($input: RepositoryUpdateInput!) {
  repositoryUpdate(data: $input) {
    type
  }
}

query FetchProjectEnvironmentsList($data: IDInput!) {
  projectEnvironmentList(data: $data) {
    id
    projectId
    name
    frontendCredentials {
      id
      url
      login
      password
    }
    backendCredentials {
      id
      url
      login
      password
    }
  }
}

query FetchProjectEnvironment($input: IDInput!) {
  projectEnvironment(data: $input) {
    id
    projectId
    name
    frontendCredentials {
      id
      url
      login
      password
    }
    backendCredentials {
      id
      url
      login
      password
    }
  }
}

query FetchEnvsRequestsList(
  $filters: RequestFilter
  $pagination: PaginationInput
  $sort: [RequestSortFieldInput!]
) {
  requestList(filters: $filters, pagination: $pagination, sort: $sort) {
    results {
      id
      environment
    }
  }
}

mutation CreateOrUpdateNewProjectEnvironment($input: ProjectEnvironmentInput!) {
  projectEnvironmentCreateUpdate(data: $input) {
    name
  }
}

mutation RemoveProjectEnvironment($input: IDInput!) {
  projectEnvironmentDelete(data: $input) {
    message
  }
}

query FetchProjectIntegrationsList($data: IDInput!) {
  projectIntegrationList(data: $data) {
    id
    name
    projectId
    environment
    keys {
      id
      title
      value
    }
    credential {
      id
      url
      login
      password
    }
  }
}

query FetchIntegrationsRequestsList(
  $filters: RequestFilter
  $pagination: PaginationInput
  $sort: [RequestSortFieldInput!]
) {
  requestList(filters: $filters, pagination: $pagination, sort: $sort) {
    results {
      id
      integrationName
    }
  }
}

mutation CreateNewProjectIntegration($input: ProjectIntegrationInput!) {
  projectIntegrationCreateUpdate(data: $input) {
    name
  }
}

query FetchHistoryLogs($filters: LogFilter, $pagination: PaginationInput) {
  logList(filters: $filters, pagination: $pagination) {
    results {
      createdAt
      createdBy {
        fullName
        id
      }
      id
      message
    }
    count
  }
}

query FetchAllDocumentCategories {
  documentCategoryList {
    value: id
    label: name
  }
}

query FetchProjectIntegrations($data: IDInput!) {
  projectIntegrationPage(data: $data) {
    gitGroupId
    slackChannels {
      template {
        label
        prefix
      }
      channelId
      createdAt
      channelUrl
    }
  }
}

mutation ConnectProjectToGit($input: ProjectGitIntegrationInput!) {
  projectConnectToGit(data: $input) {
    id
  }
}

mutation CreateProjectSlackChannel($input: ProjectSlackInput!) {
  projectAddSlackChannel(data: $input) {
    channelUrl
  }
}
