schema {
  query: Query
  mutation: Mutation
}

input ActiveInput {
  id: Int!
  isActive: Boolean!
}

enum ContractChoice {
  full_time
  part_time
}

"""
Date (isoformat)
"""
scalar Date

type DepartmentType {
  id: Int!
  name: String!
}

input ForgotPasswordInput {
  email: String!
}

type ForgotPasswordType {
  email: String!
  message: String!
}

enum GitPlatformEnum {
  BITBUCKET
  GITLAB
}

input IDInput {
  id: Int!
}

type ImageType {
  fileName: String!
  size: Int!
  url: String!
}

input LoginInput {
  email: String!
  password: String!
}

type LoginSuccessType {
  accessToken: String!
  refreshToken: String!
  user: UserType!
}

type MessageType {
  message: String!
}

type Mutation {
  forgotPassword(data: ForgotPasswordInput!): ForgotPasswordType!
  """
  Login
  """
  login(data: LoginInput!): LoginSuccessType!
  """
  User updating himself
  """
  meUpdate(data: ProfileInput!): ProfileType!
  """
  Project creation or updating by id
  """
  project(data: ProjectInput!): ProjectType!
  """
  Project deletion
  """
  projectDelete(data: IDInput!): MessageType!
  resetPassword(data: ResetPasswordInput!): MessageType!
  """
  User creation
  """
  signup(data: LoginInput!): MessageType!
  """
  Refreshing of tokens
  """
  tokenRefresh(data: RefreshTokenInput!): LoginSuccessType!
  """
  Change user status
  """
  userChangeStatus(data: ActiveInput!): UserType!
  """
  User create or updating
  """
  userCreateUpdate(data: UserInput!): UserType!
  """
  User deletion
  """
  userDelete: MessageType!
  """
  Add user note
  """
  userNote(data: NoteInput!): NoteType!
}

input NoteInput {
  id: Int = null
  text: String!
  userId: Int!
}

type NoteType {
  createdBy: ProfileType
  id: Int!
  text: String!
}

input PaginationInput {
  limit: Int = 10
  offset: Int = 0
}

input ProfileInput {
  address: String = null
  birthDate: Date = null
  firstName: String = null
  lastName: String = null
  phone: String = null
  photo: Upload
}

type ProfileType {
  address: String
  birthDate: Date
  email: String!
  firstName: String
  fullName: String!
  lastName: String
  phone: String
  photo: ImageType
}

input ProjectInput {
  awsLogsSlug: String = null
  gitGroupId: String = null
  gitPlatform: GitPlatformEnum = null
  gitSlug: String = null
  gitUrl: String = null
  id: Int = null
  name: String = null
  slackBuildsChannelId: String = null
  slackBuildsChannelUrl: String = null
  slackChannelId: String = null
  slackChannelUrl: String = null
  slackErrorsChannelId: String = null
  slackErrorsChannelUrl: String = null
  status: StatusEnum = null
}

type ProjectType {
  awsLogsSlug: String
  createdBy: UserType
  gitGroupId: String
  gitPlatform: GitPlatformEnum
  gitSlug: String
  gitUrl: String
  id: Int!
  name: String
  slackBuildsChannelId: String
  slackBuildsChannelUrl: String
  slackChannelId: String
  slackChannelUrl: String
  slackErrorsChannelId: String
  slackErrorsChannelUrl: String
  status: StatusEnum
}

type Query {
  """
  Getting list of users' departments
  """
  departmentsList: [DepartmentType!]!
  """
  Getting authenticated user
  """
  me: ProfileType!
  """
  Getting project by id
  """
  project(data: IDInput!): ProjectType!
  """
  Getting list of projects
  """
  projectsList: [ProjectType!]!
  """
  Getting list of users' roles
  """
  rolesList: [RoleType!]!
  """
  Getting user by id
  """
  userDetails(data: IDInput!): UserType!
  """
  Getting list of users
  """
  usersList(
    filters: UserFilter = null
    pagination: PaginationInput!
    search: String = null
  ): UserTypePagination!
}

input RefreshTokenInput {
  refreshToken: String!
}

input ResetPasswordInput {
  password: String!
  token: String!
}

type RoleType {
  id: Int!
  name: String!
}

enum StatusEnum {
  DESIGN
  FINISHED
  IN_PROGRESS
  ON_HOLD
  STOPPED
  SUPPORT
}

scalar Upload

input UserFilter {
  departmentId: [Int!] = null
  isActive: Boolean = null
  roleId: [Int!] = null
}

input UserInput {
  address: String = null
  birthDate: Date = null
  contractType: ContractChoice = null
  departmentId: Int = null
  email: String = null
  firstName: String = null
  id: Int = null
  isActive: Boolean = null
  isSuperuser: Boolean = null
  lastName: String = null
  phone: String = null
  photo: Upload
  roleId: Int = null
}

type UserType {
  address: String
  birthDate: Date
  contractType: ContractChoice
  department: DepartmentType
  email: String!
  firstName: String
  fullName: String!
  id: String
  isActive: Boolean
  isSuperuser: Boolean
  lastName: String
  notes: [NoteType!]
  phone: String
  photo: ImageType
  role: RoleType
}

type UserTypePagination {
  count: Int!
  limit: Int!
  offset: Int!
  results: [UserType!]!
}
