schema {
  query: Query
  mutation: Mutation
}

input ActiveInput {
  id: Int!
  isActive: Boolean!
}

input ChangePasswordInput {
  newPassword: String!
  oldPassword: String!
}

input ClientInput {
  email: String!
  fullName: String!
  id: Int = null
  notes: String = null
  phone: String = null
  position: String = null
}

type ClientType {
  email: String!
  fullName: String!
  id: Int
  notes: String
  phone: String
  position: String
}

enum ContractChoice {
  full_time
  part_time
}

"""
Date (isoformat)
"""
scalar Date

"""
Date with time (isoformat)
"""
scalar DateTime

type DepartmentType {
  id: Int!
  name: String!
}

input EnvironmentCredentialsInput {
  login: String!
  password: String!
  url: String!
}

type EnvironmentCredentialsType {
  login: String!
  password: String!
  url: String!
}

input ForgotPasswordInput {
  email: String!
}

type ForgotPasswordType {
  email: String!
  message: String!
}

input IDInput {
  id: Int!
}

type ImageType {
  fileName: String!
  size: Int!
  url: String!
}

input IntegrationCredentialsInput {
  id: Int = null
  key: String = null
  login: String = null
  name: String = null
  password: String = null
  url: String = null
}

type IntegrationCredentialsType {
  id: Int
  key: String
  login: String
  name: String
  password: String
  url: String
}

input LoginInput {
  email: String!
  password: String!
}

type LoginSuccessType {
  accessToken: String!
  refreshToken: String!
  user: UserType!
}

type MessageType {
  message: String!
}

type Mutation {
  forgotPassword(data: ForgotPasswordInput!): ForgotPasswordType!
  """
  Login
  """
  login(data: LoginInput!): LoginSuccessType!
  """
  User updating himself
  """
  meUpdate(data: ProfileInput!): ProfileType!
  passwordChange(data: ChangePasswordInput!): MessageType!
  """
  Project add member
  """
  projectAddMember(data: ProjectMemberInput!): ProjectMemberType!
  """
  Project change status
  """
  projectChangeStatus(data: ProjectStatusInput!): ProjectType!
  """
  Project creation
  """
  projectCreateUpdate(data: ProjectCreateInput!): ProjectType!
  """
  Project deletion
  """
  projectDelete(data: IDInput!): MessageType!
  """
  Project delete member
  """
  projectDeleteMember(data: ProjectMemberInput!): MessageType!
  """
  Project create or update environment
  """
  projectEnvironmentCreateUpdate(data: ProjectEnvironmentInput!): ProjectEnvironmentType!
  """
  Project create or update integration
  """
  projectIntegrationCreateUpdate(data: ProjectIntegrationInput!): ProjectIntegrationType!
  """
  Repository creation or update
  """
  repositoryCreateUpdate(data: RepositoryInput!): RepositoryType!
  resetPassword(data: ResetPasswordInput!): MessageType!
  """
  User creation
  """
  signup(data: LoginInput!): MessageType!
  """
  Refreshing of tokens
  """
  tokenRefresh(data: RefreshTokenInput!): LoginSuccessType!
  """
  Change user status
  """
  userChangeStatus(data: ActiveInput!): UserType!
  """
  User create or updating
  """
  userCreateUpdate(data: UserInput!): UserType!
  """
  User deletion
  """
  userDelete: MessageType!
  """
  Add user note
  """
  userNote(data: NoteInput!): NoteType!
}

input NoteInput {
  id: Int = null
  text: String!
  userId: Int!
}

type NoteType {
  createdBy: ProfileType
  id: Int!
  text: String!
}

input PaginationInput {
  limit: Int = 10
  offset: Int = 0
}

input ProfileInput {
  address: String = null
  birthDate: Date = null
  firstName: String = null
  lastName: String = null
  phone: String = null
  photo: Upload
}

type ProfileType {
  address: String
  birthDate: Date
  email: String!
  firstName: String
  fullName: String!
  lastName: String
  phone: String
  photo: ImageType
}

input ProjectCreateInput {
  clientTeam: [ClientInput!] = null
  design: String = null
  endDate: Date = null
  hoursEstimated: Int = null
  id: Int = null
  name: String!
  notes: String = null
  phase: ProjectPhaseChoice!
  roadmap: String = null
  startDate: Date!
  status: StatusEnum
}

input ProjectEnvironmentInput {
  backendCredentials: EnvironmentCredentialsInput = null
  frontendCredentials: EnvironmentCredentialsInput = null
  id: Int = null
  name: String!
  projectId: Int!
}

type ProjectEnvironmentType {
  backendCredentials: EnvironmentCredentialsType
  frontendCredentials: EnvironmentCredentialsType
  id: Int
  name: String!
  projectId: Int!
}

input ProjectFilter {
  status: StatusEnum = null
}

input ProjectIntegrationInput {
  credentials: [IntegrationCredentialsInput!]
  id: Int = null
  name: String!
  projectId: Int!
}

type ProjectIntegrationType {
  credentials: [IntegrationCredentialsType!]
  id: Int
  name: String!
  projectId: Int!
}

input ProjectMemberInput {
  currentTeam: Boolean = true
  projectId: Int!
  userId: Int!
}

type ProjectMemberListType {
  currentTeam: [UserType!]!
  otherContrubutors: [UserType!]!
}

type ProjectMemberType {
  currentTeam: Boolean!
  project: ProjectType!
  user: UserType!
}

enum ProjectPhaseChoice {
  DESIGN
  DEVELOPMENT
  HANDOVER
  PRE_SIGNED
  RELEASED
  SIGNED
  SUPPORT
}

input ProjectStatusInput {
  id: Int!
  status: StatusEnum!
}

type ProjectType {
  PM: [UserType!]
  clientTeam: [ClientType!]
  createdAt: DateTime!
  createdBy: UserType
  design: String
  endDate: Date
  hoursEstimated: Int
  id: Int!
  name: String!
  notes: String
  phase: ProjectPhaseChoice!
  roadmap: String
  startDate: Date!
  status: StatusEnum
}

type ProjectTypePagination {
  count: Int!
  limit: Int!
  offset: Int!
  results: [ProjectType!]!
}

type Query {
  """
  Getting list of users' departments
  """
  departmentsList: [DepartmentType!]!
  """
  Getting authenticated user
  """
  me: ProfileType!
  """
  Getting project by id
  """
  project(data: IDInput!): ProjectType!
  """
  Getting environments for project by id
  """
  projectEnvironmentList(data: IDInput!): [ProjectEnvironmentType!]!
  """
  Getting integrations for project by id
  """
  projectIntegrationList(data: IDInput!): [ProjectIntegrationType!]!
  """
  Getting member for project by id
  """
  projectMemberList(data: IDInput!): ProjectMemberListType!
  """
  Getting repositories for project by id
  """
  projectRepositoryList(data: IDInput!): [RepositoryType!]!
  """
  Getting list of projects
  """
  projectsList(
    filters: ProjectFilter = null
    pagination: PaginationInput!
    search: String = null
  ): ProjectTypePagination!
  """
  Getting list of users' roles
  """
  rolesList: [RoleType!]!
  """
  Getting user by id
  """
  userDetails(data: IDInput!): UserType!
  """
  Getting list of users
  """
  usersList(
    filters: UserFilter = null
    pagination: PaginationInput!
    search: String = null
  ): UserTypePagination!
}

input RefreshTokenInput {
  refreshToken: String!
}

input RepositoryInput {
  id: Int = null
  name: String!
  platform: RepositoryPlatformChoice = null
  projectId: Int!
  type: RepositoryTypeChoice = null
}

enum RepositoryPlatformChoice {
  MOBILE
  WEB
}

type RepositoryType {
  createdAt: DateTime!
  id: Int
  name: String!
  platform: RepositoryPlatformChoice
  projectId: Int!
  type: RepositoryTypeChoice
}

enum RepositoryTypeChoice {
  BACKEND
  FRONTEND
}

input ResetPasswordInput {
  password: String!
  token: String!
}

type RoleType {
  id: Int!
  name: String!
}

enum StatusEnum {
  BLOCKED
  IN_PROGRESS
  STOPPED
  WAITING
}

scalar Upload

input UserFilter {
  departmentId: [Int!] = null
  isActive: Boolean = null
  roleId: [Int!] = null
}

input UserInput {
  address: String = null
  birthDate: Date = null
  contractType: ContractChoice = null
  departmentId: Int = null
  email: String = null
  firstName: String = null
  id: Int = null
  isActive: Boolean = null
  isSuperuser: Boolean = null
  lastName: String = null
  phone: String = null
  photo: Upload
  roleId: Int = null
}

type UserType {
  address: String
  birthDate: Date
  contractType: ContractChoice
  department: DepartmentType
  email: String!
  firstName: String
  fullName: String!
  id: String
  isActive: Boolean
  isSuperuser: Boolean
  lastName: String
  notes: [NoteType!]
  phone: String
  photo: ImageType
  role: RoleType
}

type UserTypePagination {
  count: Int!
  limit: Int!
  offset: Int!
  results: [UserType!]!
}
