schema {
  query: Query
  mutation: Mutation
}

input ActiveInput {
  id: Int!
  isActive: Boolean!
}

input BoilerplateFilter {
  isActive: Boolean = null
  platform: RepositoryPlatformChoice = null
  type: RepositoryTypeChoice = null
}

type BoilerplateType {
  gitRepoId: String
  gitTfRepoId: String
  id: Int!
  isActive: Boolean!
  name: String!
  platform: RepositoryPlatformChoice
  type: RepositoryTypeChoice
}

input ChangePasswordInput {
  newPassword: String!
  oldPassword: String!
}

input ClientInput {
  email: String!
  fullName: String!
  id: Int = null
  notes: String = null
  phone: String = null
  pointContact: Boolean = null
  position: String = null
}

input ClientPointContactInput {
  id: Int!
  pointContact: Boolean!
}

type ClientType {
  email: String!
  fullName: String!
  id: Int!
  notes: String
  phone: String
  pointContact: Boolean
  position: String
}

enum ContractChoice {
  FULL_TIME
  PART_TIME
}

"""
Date (isoformat)
"""
scalar Date

"""
Date with time (isoformat)
"""
scalar DateTime

type DepartmentType {
  id: Int!
  name: String!
}

type DocumentCategoryType {
  id: Int!
  name: String!
}

input DocumentFilter {
  addedById: Int = null
  categoryId: Int = null
  internal: Boolean = null
  projectId: Int = null
  userId: Int = null
}

input DocumentGenerateFieldInput {
  name: String!
  value: String
}

input DocumentGenerateInput {
  categoryId: Int
  fields: [DocumentGenerateFieldInput!]!
  projectId: Int
  templateId: Int!
  userId: Int
}

input DocumentInput {
  categoryId: Int
  file: Upload!
  id: Int
  name: String!
  projectId: Int
  userId: Int
}

enum DocumentSort {
  created_at
}

input DocumentSortFieldInput {
  direction: OrderDirectionChoice!
  field: DocumentSort!
}

input DocumentTemplateFieldInput {
  description: String
  id: Int
  name: String!
}

type DocumentTemplateFieldType {
  description: String
  id: Int!
  name: String!
}

input DocumentTemplateInput {
  description: String
  fields: [DocumentTemplateFieldInput!]!
  id: Int
  name: String!
  url: String!
}

enum DocumentTemplateSort {
  name
  url
}

input DocumentTemplateSortFieldInput {
  direction: OrderDirectionChoice!
  field: DocumentTemplateSort!
}

type DocumentTemplateType {
  description: String
  fields: [DocumentTemplateFieldType!]
  id: Int!
  name: String!
  url: String
}

type DocumentTemplateTypePagination {
  count: Int!
  limit: Int
  offset: Int!
  results: [DocumentTemplateType!]!
}

type DocumentType {
  addedBy: ProfileType
  category: DocumentCategoryType
  createdAt: DateTime!
  file: FileType!
  id: Int!
  internal: Boolean!
  name: String!
  project: ProjectType
  user: ProfileType
}

type DocumentTypePagination {
  count: Int!
  limit: Int
  offset: Int!
  results: [DocumentType!]!
}

input EnvironmentCredentialsInput {
  login: String
  password: String
  url: String
}

type EnvironmentCredentialsType {
  id: Int!
  login: String
  password: String
  url: String
}

type FileType {
  key: String!
  url: String!
}

input ForgotPasswordInput {
  email: String!
}

type ForgotPasswordType {
  email: String!
  message: String!
}

input GitInitialUserId {
  userId: Int!
}

input GitInitialUserInput {
  accessLevel: RepositoryAccessLevelChoice!
  userId: Int!
}

enum GitInitialUserSort {
  accessLevel
  department
  email
  fullName
}

input GitInitialUserSortFieldInput {
  direction: OrderDirectionChoice!
  field: GitInitialUserSort!
}

type GitInitialUserType {
  accessLevel: RepositoryAccessLevelChoice!
  user: ProfileType!
}

type GitInitialUserTypePagination {
  count: Int!
  limit: Int
  offset: Int!
  results: [GitInitialUserType!]!
}

enum GitPlatformEnum {
  BITBUCKET
  GITLAB
}

input IDInput {
  id: Int!
}

input IDNameInput {
  id: Int = null
  name: String!
}

input IntegrationCredentialsInput {
  id: Int = null
  key: String = null
  login: String = null
  name: String = null
  password: String = null
  url: String = null
}

type IntegrationCredentialsType {
  id: Int!
  key: String
  login: String
  name: String
  password: String
  url: String
}

input IntegrationKeyInput {
  id: Int = null
  title: String!
  value: String!
}

type IntegrationKeyType {
  id: Int!
  title: String!
  value: String!
}

input LogFilter {
  createdById: Int = null
  projectId: Int = null
  userId: Int = null
}

type LogType {
  createdAt: DateTime!
  createdBy: ProfileType!
  id: Int!
  message: String!
}

type LogTypePagination {
  count: Int!
  limit: Int
  offset: Int!
  results: [LogType!]!
}

input LoginInput {
  email: String!
  password: String!
}

type LoginSuccessType {
  accessToken: String!
  refreshToken: String!
  user: UserType!
}

type MessageType {
  message: String!
}

type Mutation {
  """
  Update client point contact
  """
  clientMakePointContact(data: ClientPointContactInput!): ClientType!
  """
  Create or update client document
  """
  documentClientCreateUpdate(data: DocumentInput!): DocumentType!
  """
  Generate client document
  """
  documentClientGenerate(data: [DocumentGenerateInput!]!): [DocumentType!]!
  """
  Delete document
  """
  documentDelete(data: IDInput!): MessageType!
  """
  Create or update internal document
  """
  documentInternalCreateUpdate(data: DocumentInput!): DocumentType!
  """
  Generate internal document
  """
  documentInternalGenerate(data: [DocumentGenerateInput!]!): [DocumentType!]!
  """
  Create or update project document
  """
  documentProjectCreateUpdate(data: DocumentInput!): DocumentType!
  """
  Generate project document
  """
  documentProjectGenerate(data: [DocumentGenerateInput!]!): [DocumentType!]!
  """
  Create document template
  """
  documentTemplateCreateUpdate(data: DocumentTemplateInput!): DocumentTemplateType!
  """
  Delete document template
  """
  documentTemplateDelete(data: IDInput!): MessageType!
  """
  Create or update user document
  """
  documentUserCreateUpdate(data: DocumentInput!): DocumentType!
  """
  Generate user document
  """
  documentUserGenerate(data: [DocumentGenerateInput!]!): [DocumentType!]!
  """
  Sending reset password email
  """
  forgotPassword(data: ForgotPasswordInput!): ForgotPasswordType!
  """
  Add or update git initial user
  """
  gitInitialUserCreateUpdate(data: GitInitialUserInput!): GitInitialUserType!
  """
  Delete git initial user
  """
  gitInitialUserDelete(data: GitInitialUserId!): MessageType!
  """
  Login
  """
  login(data: LoginInput!): LoginSuccessType!
  """
  User updating himself
  """
  meUpdate(data: ProfileInput!): ProfileType!
  """
  Unread all notification
  """
  notificationUnread: MessageType!
  """
  Update notification
  """
  notificationUpdate(data: [Int!]!): NotificationPaginationType!
  """
  Change password
  """
  passwordChange(data: ChangePasswordInput!): MessageType!
  """
  Update permissions
  """
  permissionsUpdate(data: [PermissionInput!]!): [PermissionType!]!
  """
  Project add member
  """
  projectAddMember(data: ProjectMemberInput!): ProjectMemberType!
  """
  Project add slack
  """
  projectAddSlackChannel(data: ProjectSlackInput!): ProjectSlackType!
  """
  Project integration with git
  """
  projectConnectToGit(data: ProjectGitIntegrationInput!): ProjectType!
  """
  Project creation
  """
  projectCreate(data: ProjectCreateInput!): ProjectType!
  """
  Project deletion
  """
  projectDelete(data: IDInput!): MessageType!
  """
  Project delete member
  """
  projectDeleteMember(data: ProjectMemberInput!): MessageType!
  """
  Project create or update environment
  """
  projectEnvironmentCreateUpdate(data: ProjectEnvironmentInput!): ProjectEnvironmentType!
  """
  Project delete environment
  """
  projectEnvironmentDelete(data: IDInput!): MessageType!
  """
  Project create or update integration
  """
  projectIntegrationCreateUpdate(data: ProjectIntegrationInput!): ProjectIntegrationType!
  """
  Project delete integration
  """
  projectIntegrationDelete(data: IDInput!): MessageType!
  """
  Project status creation/updating by id
  """
  projectStatusCreateUpdate(data: IDNameInput!): ProjectStatusType!
  """
  Project status deletion by id
  """
  projectStatusDelete(data: IDInput!): MessageType!
  """
  Project update
  """
  projectUpdate(data: ProjectUpdateInput!): ProjectType!
  """
  Project update member
  """
  projectUpdateMember(data: ProjectMemberInput!): ProjectMemberType!
  """
  Repository creation
  """
  repositoryCreate(data: RepositoryCreateInput!): RepositoryType!
  """
  Repository deletion
  """
  repositoryDelete(data: IDInput!): MessageType!
  """
  Repository participant creation or update
  """
  repositoryParticipantCreateUpdate(data: RepositoryParticipantInput!): RepositoryParticipantType!
  """
  Repository participant deleting
  """
  repositoryParticipantDelete(data: RepositoryParticipantInput!): MessageType!
  """
  Repository update
  """
  repositoryUpdate(data: RepositoryUpdateInput!): RepositoryType!
  """
  Create requests
  """
  requestCreate(data: RequestCreateInput!): RequestType!
  """
  Update request
  """
  requestUpdate(data: RequestUpdateInput!): RequestType!
  """
  Reset password
  """
  resetPassword(data: ResetPasswordInput!): MessageType!
  """
  Repository's secrets creation/updating
  """
  secretsAddUpdate(data: RepositorySecretsInput!): MessageType!
  """
  User creation
  """
  signup(data: LoginInput!): MessageType!
  """
  Create Slack channel template
  """
  slackTemplateCreate(data: SlackChannelTemplateInput!): SlackChannelTemplateType!
  """
  Delete Slack channel template
  """
  slackTemplateDelete(data: IDInput!): MessageType!
  """
  Update Slack channel template
  """
  slackTemplateUpdate(data: SlackChannelTemplateInput!): SlackChannelTemplateType!
  """
  Refreshing of tokens
  """
  tokenRefresh(data: RefreshTokenInput!): LoginSuccessType!
  """
  Change user status
  """
  userChangeStatus(data: ActiveInput!): UserType!
  """
  Connect user with bitbucket
  """
  userConnectBitbucket(data: IDInput!): UserType!
  """
  User create or updating
  """
  userCreateUpdate(data: UserInput!): UserType!
  """
  User deletion
  """
  userDelete: MessageType!
  """
  Add user note
  """
  userNote(data: NoteInput!): NoteType!
}

input NoteInput {
  id: Int = null
  text: String!
  userId: Int!
}

type NoteType {
  createdBy: ProfileType
  id: Int!
  text: String!
}

input NotificationFilter {
  isNew: Boolean = null
}

type NotificationPaginationType {
  count: Int!
  limit: Int
  newCount: Int!
  offset: Int!
  results: [NotificationType!]!
}

type NotificationType {
  createdAt: DateTime!
  externalId: Int!
  id: Int!
  isNew: Boolean!
  message: String!
  type: NotificationTypeChoice!
}

enum NotificationTypeChoice {
  ADDED_PROJECT
  ADDED_REPOSITORY
  ASSIGNED_REQUEST
  FILL_REPORT
  UNASSIGNED_REQUEST
}

enum OrderDirectionChoice {
  ASC
  DESC
}

input PaginationInput {
  limit: Int = null
  offset: Int = 0
}

input PermissionInput {
  id: Int!
  roles: [Int!]!
}

type PermissionType {
  id: Int!
  name: String!
  roles: [RoleType!]
  rolesList: [String!]
  title: String
}

type PlatformType {
  id: Int!
  name: String!
}

type PlatformTypePagination {
  count: Int!
  limit: Int
  offset: Int!
  results: [PlatformType!]!
}

type PorjectIntegrationsPage {
  gitGroupId: String
  slackChannels: [ProjectSlackType!]
}

input ProfileInput {
  address: String
  birthDate: Date
  firstName: String!
  lastName: String!
  phone: String
  photo: Upload
}

type ProfileType {
  address: String
  birthDate: Date
  department: DepartmentType
  email: String!
  firstName: String!
  fullName: String!
  id: Int!
  lastName: String!
  phone: String
  photo: FileType
  photoThumbnail: FileType
  role: RoleType
}

input ProjectCreateInput {
  clientTeam: [ClientInput!] = null
  design: String
  endDate: Date = null
  gitPlatform: GitPlatformEnum = null
  hoursEstimated: Int = null
  name: String!
  notes: String = null
  phase: ProjectPhaseChoice = null
  platforms: [Int!]
  roadmap: String
  startDate: Date = null
  statusId: Int = null
}

enum ProjectEnvironmentChoice {
  DEV
  PROD
  STAGE
}

input ProjectEnvironmentInput {
  backendCredentials: EnvironmentCredentialsInput
  frontendCredentials: EnvironmentCredentialsInput
  id: Int = null
  name: ProjectEnvironmentChoice!
  projectId: Int!
}

type ProjectEnvironmentType {
  backendCredentials: EnvironmentCredentialsType
  frontendCredentials: EnvironmentCredentialsType
  id: Int!
  name: ProjectEnvironmentChoice!
  projectId: Int!
}

input ProjectFilter {
  hasRepositories: Boolean = null
  inGit: Boolean = null
  statusId: Int = null
}

input ProjectGitIntegrationInput {
  id: Int!
}

type ProjectGlossaryType {
  id: Int!
  name: String!
}

type ProjectGlossaryTypePagination {
  count: Int!
  limit: Int
  offset: Int!
  results: [ProjectGlossaryType!]!
}

input ProjectIntegrationInput {
  credential: IntegrationCredentialsInput
  environment: ProjectEnvironmentChoice = null
  id: Int = null
  keys: [IntegrationKeyInput!]
  name: String!
  projectId: Int!
}

type ProjectIntegrationType {
  credential: IntegrationCredentialsType
  environment: ProjectEnvironmentChoice
  id: Int!
  keys: [IntegrationKeyType!]
  name: String!
  projectId: Int!
}

input ProjectMemberInput {
  currentTeam: Boolean!
  projectId: Int!
  slackChannels: [Int!]
  userId: Int!
}

type ProjectMemberListType {
  currentTeam: [ProjectMemberType!]!
  otherContrubutors: [ProjectMemberType!]!
}

type ProjectMemberType {
  currentTeam: Boolean!
  endDate: DateTime
  project: ProjectType!
  slackChannels: [Int!]!
  startDate: DateTime!
  user: ProfileType!
}

type ProjectMemberTypePagination {
  count: Int!
  limit: Int
  offset: Int!
  results: [ProjectMemberType!]!
}

enum ProjectPhaseChoice {
  DESIGN
  DEVELOPMENT
  HANDOVER
  PRE_SIGNED
  RELEASED
  SIGNED
  SUPPORT
}

type ProjectPreviewType {
  createdAt: DateTime!
  createdBy: ProfileType
  id: Int!
  inTeam: Boolean!
  name: String!
}

type ProjectRepositoryType {
  projectInGit: Boolean!
  projectRepositories: [RepositoryType!]
}

input ProjectSlackInput {
  channelTemplate: SlackChannelTemplateInput!
  projectId: Int!
}

type ProjectSlackType {
  channelId: String
  channelTemplate: String
  channelUrl: String
  createdAt: DateTime!
  id: Int!
  template: SlackChannelTemplateType
}

type ProjectStatusType {
  id: Int!
  name: String!
}

type ProjectStatusTypePagination {
  count: Int!
  limit: Int
  offset: Int!
  results: [ProjectStatusType!]!
}

enum ProjectTeamChoice {
  CURRENT
  OTHER
}

type ProjectType {
  PM: [ProfileType!]
  clientTeam: [ClientType!]
  createdAt: DateTime!
  createdBy: ProfileType
  design: String
  endDate: Date
  gitGroupId: String
  gitSlug: String
  gitUrl: String
  hoursEstimated: Int
  id: Int!
  name: String!
  notes: String
  phase: ProjectPhaseChoice
  platforms: [PlatformType!]
  roadmap: String
  startDate: Date
  status: ProjectStatusType
}

type ProjectTypePagination {
  count: Int!
  limit: Int
  offset: Int!
  results: [ProjectType!]!
}

input ProjectUpdateInput {
  clientTeam: [ClientInput!] = null
  design: String
  endDate: Date = null
  gitPlatform: GitPlatformEnum = null
  hoursEstimated: Int = null
  id: Int!
  name: String = null
  notes: String = null
  phase: ProjectPhaseChoice = null
  platforms: [Int!]
  roadmap: String
  startDate: Date = null
  statusId: Int = null
}

type Query {
  """
  Getting boilerplates
  """
  boilerplateList(filters: BoilerplateFilter = null): [BoilerplateType!]!
  """
  Getting list of users' departments
  """
  departmentsList: [DepartmentType!]!
  """
  Getting list of document categories
  """
  documentCategoryList: [DocumentCategoryType!]!
  """
  Getting list of client documents
  """
  documentClientList(
    filters: DocumentFilter = null
    pagination: PaginationInput = null
    search: String = ""
    sort: [DocumentSortFieldInput!] = null
  ): DocumentTypePagination!
  """
  Getting list of internal documents
  """
  documentInternalList(
    filters: DocumentFilter = null
    pagination: PaginationInput = null
    search: String = ""
    sort: [DocumentSortFieldInput!] = null
  ): DocumentTypePagination!
  """
  Getting document template by id
  """
  documentTemplate(data: IDInput!): DocumentTemplateType!
  """
  Getting list of document templates
  """
  documentTemplateList(
    pagination: PaginationInput = null
    sort: [DocumentTemplateSortFieldInput!] = null
  ): DocumentTemplateTypePagination!
  """
  Getting list of user documents
  """
  documentUserList(
    filters: DocumentFilter = null
    pagination: PaginationInput = null
    search: String = ""
    sort: [DocumentSortFieldInput!] = null
  ): DocumentTypePagination!
  """
  Getting git initial user by id
  """
  gitInitialUserDetails(data: GitInitialUserId!): GitInitialUserType!
  """
  Getting git initial user list
  """
  gitInitialUserList(
    pagination: PaginationInput = null
    sort: [GitInitialUserSortFieldInput!] = null
  ): GitInitialUserTypePagination!
  """
  Getting list of logs
  """
  logList(filters: LogFilter = null, pagination: PaginationInput = null): LogTypePagination!
  """
  Getting authenticated user
  """
  me: ProfileType!
  """
  Getting list of notifications
  """
  notificationList(
    filters: NotificationFilter = null
    pagination: PaginationInput = null
  ): NotificationPaginationType!
  """
  Getting list of roles and permissions
  """
  permissionsList: [PermissionType!]!
  """
  Getting platform list
  """
  platformList(pagination: PaginationInput = null): PlatformTypePagination!
  """
  Getting project by id
  """
  project(data: IDInput!): ProjectType!
  """
  Getting documents for project by id
  """
  projectDocumentList(
    filters: DocumentFilter = null
    pagination: PaginationInput = null
    search: String! = ""
    sort: [DocumentSortFieldInput!] = null
  ): DocumentTypePagination!
  """
  Getting environments for project by id
  """
  projectEnvironmentList(data: IDInput!): [ProjectEnvironmentType!]!
  """
  Getting glossary list of projects
  """
  projectGlossaryList(
    filters: ProjectFilter = null
    pagination: PaginationInput = null
  ): ProjectGlossaryTypePagination!
  """
  Getting integrations for project by id
  """
  projectIntegrationList(data: IDInput!): [ProjectIntegrationType!]!
  """
  Getting project integration page by id
  """
  projectIntegrationPage(
    data: IDInput!
    slackCreatedOnly: Boolean! = false
  ): PorjectIntegrationsPage!
  """
  Getting history for project by id
  """
  projectLogList(filters: LogFilter = null, pagination: PaginationInput = null): LogTypePagination!
  """
  Getting members for project by id
  """
  projectMemberList(data: IDInput!): ProjectMemberListType!
  """
  Getting project preview by id
  """
  projectPreview(data: IDInput!): ProjectPreviewType!
  """
  Getting repositories for project by id
  """
  projectRepositoryList(data: IDInput!): ProjectRepositoryType!
  """
  Getting project's statuses list
  """
  projectStatusesList(pagination: PaginationInput = null): ProjectStatusTypePagination!
  """
  Getting list of projects
  """
  projectsList(
    filters: ProjectFilter = null
    pagination: PaginationInput = null
    search: String = null
  ): ProjectTypePagination!
  """
  Getting repository
  """
  repository(data: IDInput!): RepositoryType!
  """
  Getting glossary list of repository
  """
  repositoryGlossaryList(
    filters: RepositoryFilter = null
    pagination: PaginationInput = null
  ): RepositoryGlossaryTypePagination!
  """
  Getting repositories
  """
  repositoryList(
    filters: RepositoryFilter = null
    pagination: PaginationInput = null
    search: String = null
  ): RepositoryTypePagination!
  """
  Getting repository participants
  """
  repositoryParticipantList(
    filters: RepositoryParticipantFilter = null
    pagination: PaginationInput = null
  ): RepositoryParticipantTypePagination!
  """
  Getting repository preview
  """
  repositoryPreview(data: IDInput!): RepositoryPreviewType!
  """
  Getting request by id
  """
  requestDetails(data: IDInput!): RequestType!
  """
  Getting list of requests
  """
  requestList(
    filters: RequestFilter = null
    pagination: PaginationInput = null
    sort: [RequestSortFieldInput!] = null
  ): RequestTypePagination!
  """
  Getting list of users' roles
  """
  rolesList: [RoleType!]!
  """
  Getting Slack channel template by id
  """
  slackTemplate(data: IDInput!): SlackChannelTemplateType!
  """
  Getting Slack channel templates list
  """
  slackTemplateList: [SlackChannelTemplateType!]!
  """
  Getting technologies list
  """
  technologyList(pagination: PaginationInput = null): TechnologyTypePagination!
  """
  Getting user by id
  """
  userDetails(data: IDInput!): UserType!
  """
  Getting glossary list of users
  """
  userGlossaryList(pagination: PaginationInput = null): UserGlossaryTypePagination!
  """
  Getting project by user
  """
  userProjects(
    data: IDInput!
    filters: ProjectFilter = null
    pagination: PaginationInput = null
    search: String = null
  ): ProjectMemberTypePagination!
  """
  Getting list of users
  """
  usersList(
    filters: UserFilter = null
    pagination: PaginationInput = null
    search: String = null
  ): UserTypePagination!
}

input RefreshTokenInput {
  refreshToken: String!
}

enum RepositoryAccessLevelChoice {
  ADMIN
  GUEST
  MAINTAINER
}

input RepositoryCreateInput {
  awsSecrets: Boolean = false
  boilerplateId: Int = null
  gitRepoId: String = null
  gitSlug: String = null
  name: String!
  projectId: Int!
  technologies: [Int!]
  type: RepositoryTypeChoice!
  useTerraform: Boolean = false
  withExistingRepo: Boolean = null
  withRelay: Boolean = false
}

input RepositoryFilter {
  createdById: Int = null
  platform: RepositoryPlatformChoice = null
  projectId: Int = null
  technologies: [Int!] = null
  type: RepositoryTypeChoice = null
}

type RepositoryGlossaryType {
  id: Int!
  name: String!
}

type RepositoryGlossaryTypePagination {
  count: Int!
  limit: Int
  offset: Int!
  results: [RepositoryGlossaryType!]!
}

input RepositoryParticipantFilter {
  accessLevel: RepositoryAccessLevelChoice = null
  repositoryId: Int = null
  userId: Int = null
}

input RepositoryParticipantInput {
  accessLevel: RepositoryAccessLevelChoice = null
  repositoryId: Int!
  userId: Int!
}

type RepositoryParticipantType {
  accessLevel: RepositoryAccessLevelChoice!
  repository: RepositoryType!
  user: ProfileType!
}

type RepositoryParticipantTypePagination {
  count: Int!
  limit: Int
  offset: Int!
  results: [RepositoryParticipantType!]!
}

enum RepositoryPlatformChoice {
  DESKTOP
  MOBILE
}

type RepositoryPreviewType {
  id: Int!
  name: String!
  projectId: Int
}

input RepositorySecretsInput {
  environment: ProjectEnvironmentChoice!
  key: String!
  repositoryId: Int!
  value: String = ""
}

type RepositoryType {
  boilerplate: BoilerplateType
  createdAt: DateTime!
  createdBy: ProfileType
  gitRepoId: String
  gitSlug: String
  gitTerraformRepoId: String
  gitTerraformUrl: String
  gitUrl: String
  id: Int!
  name: String
  project: ProjectType!
  technologies: [TechnologyType!]
  type: RepositoryTypeChoice
  useTerraform: Boolean
}

enum RepositoryTypeChoice {
  BACKEND
  FRONTEND
}

type RepositoryTypePagination {
  count: Int!
  limit: Int
  offset: Int!
  results: [RepositoryType!]!
}

input RepositoryUpdateInput {
  gitSlug: String = null
  id: Int = null
  name: String = null
}

input RequestCreateInput {
  accessLevel: RepositoryAccessLevelChoice = null
  assignedRoleId: Int!
  assignedToId: Int = null
  description: String = null
  dueDate: Date = null
  environment: ProjectEnvironmentChoice = null
  integrationName: String = null
  projectId: Int!
  repositoryId: Int = null
  repositoryType: RepositoryTypeChoice = null
  technologies: [Int!]
  type: RequestTypeChoice!
}

input RequestFilter {
  assignedRole: Int = null
  assignedTo: Int = null
  createdBy: Int = null
  project: Int = null
  status: RequestStatusChoice = null
  type: RequestTypeChoice = null
}

enum RequestSort {
  assigned_role
  assigned_to
  created_at
  created_by
  due_date
  status
  type
}

input RequestSortFieldInput {
  direction: OrderDirectionChoice!
  field: RequestSort!
}

enum RequestStatusChoice {
  PENDING
  RESOLVED
}

type RequestType {
  accessLevel: RepositoryAccessLevelChoice
  assignedRole: RoleType
  assignedTo: ProfileType
  createdAt: DateTime!
  createdBy: ProfileType
  description: String
  dueDate: Date
  environment: ProjectEnvironmentChoice
  id: Int!
  integrationName: String
  project: ProjectType
  projectTeam: ProjectTeamChoice
  repository: RepositoryType
  repositoryType: RepositoryTypeChoice
  status: RequestStatusChoice!
  technologies: [TechnologyType!]
  type: RequestTypeChoice!
}

enum RequestTypeChoice {
  ACCESS_PROJECT
  ACCESS_REPOSITORY
  CREATION_ENVIRONMENT
  CREATION_INTEGRATION
  CREATION_REPOSITORY
}

type RequestTypePagination {
  count: Int!
  limit: Int
  offset: Int!
  results: [RequestType!]!
}

input RequestUpdateInput {
  assignedRoleId: Int = null
  assignedToId: Int = null
  dueDate: Date = null
  id: Int!
  status: RequestStatusChoice = null
}

input ResetPasswordInput {
  password: String!
  token: String!
}

type RoleType {
  color: String
  id: Int!
  name: String!
  permissions: [PermissionType!]!
  permissionsList: [String!]!
}

input SlackChannelTemplateInput {
  id: Int = null
  initialUsers: [Int!]
  isPrivate: Boolean = null
  label: String = null
  prefix: String = null
}

type SlackChannelTemplateType {
  id: Int!
  initialUsers: [ProfileType!]
  isPrivate: Boolean
  label: String
  prefix: String!
}

type TechnologyType {
  id: Int!
  name: String!
}

type TechnologyTypePagination {
  count: Int!
  limit: Int
  offset: Int!
  results: [TechnologyType!]!
}

scalar Upload

input UserFilter {
  departmentId: [Int!] = null
  isActive: Boolean = null
  roleId: [Int!] = null
}

type UserGlossaryType {
  fullName: String!
  id: Int!
  photo: FileType
  photoThumbnail: FileType
}

type UserGlossaryTypePagination {
  count: Int!
  limit: Int
  offset: Int!
  results: [UserGlossaryType!]!
}

input UserInput {
  address: String
  birthDate: Date
  contractType: ContractChoice
  departmentId: Int
  email: String
  firstName: String!
  id: Int
  isActive: Boolean
  isSuperuser: Boolean
  lastName: String!
  phone: String
  photo: Upload
  roleId: Int
}

type UserType {
  address: String
  birthDate: Date
  bitbucketId: String
  contractType: ContractChoice
  department: DepartmentType
  email: String!
  firstName: String!
  fullName: String!
  id: Int!
  isActive: Boolean
  isSuperuser: Boolean
  lastName: String!
  notes: [NoteType!]
  phone: String
  photo: FileType
  photoThumbnail: FileType
  role: RoleType
}

type UserTypePagination {
  count: Int!
  limit: Int
  offset: Int!
  results: [UserType!]!
}
