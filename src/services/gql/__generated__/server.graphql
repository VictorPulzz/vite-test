schema {
  query: Query
  mutation: Mutation
}

type DepartmentType {
  id: Int!
  name: String!
}

input EmployeeInput {
  awsUsername: String = null
  bitbucketId: String = null
  department: IDInput = null
  email: String = null
  firstName: String = null
  gitlabUserId: String = null
  gitlabUsername: String = null
  isActive: Boolean = null
  isDeveloper: Boolean = null
  isGitAdmin: Boolean = null
  isSlackAdmin: Boolean = null
  isSuperuser: Boolean = null
  lastName: String = null
  notes: String = null
  passwordToken: String = null
  slackUserId: String = null
}

type EmployeeType {
  awsUsername: String
  bitbucketId: String
  department: DepartmentType
  email: String!
  firstName: String
  fullName: String!
  gitlabUserId: String
  gitlabUsername: String
  id: String!
  isActive: Boolean
  isDeveloper: Boolean
  isGitAdmin: Boolean
  isSlackAdmin: Boolean
  isSuperuser: Boolean
  lastName: String
  notes: String
  passwordToken: String
  slackUserId: String
}

enum GitPlatformEnum {
  BITBUCKET
  GITLAB
}

input IDInput {
  id: Int!
}

input LoginInput {
  email: String!
  password: String!
}

type LoginSuccessType {
  accessToken: String!
  refreshToken: String!
  user: EmployeeType!
}

type MessageType {
  message: String!
}

type Mutation {
  """
  Employee deletion
  """
  employeeDelete: MessageType!
  """
  Employee updating
  """
  employeeUpdate(data: EmployeeInput!): EmployeeType!
  """
  Login
  """
  login(data: LoginInput!): LoginSuccessType!
  """
  Project creation or updating by id
  """
  project(data: ProjectInput!): ProjectType!
  """
  Project deletion
  """
  projectDelete(data: IDInput!): MessageType!
  """
  Employee creation
  """
  signup(data: LoginInput!): MessageType!
  """
  Refreshing of tokens
  """
  tokenRefresh(data: RefreshTokenInput!): LoginSuccessType!
}

input ProjectInput {
  awsLogsSlug: String = null
  gitGroupId: String = null
  gitPlatform: GitPlatformEnum = null
  gitSlug: String = null
  gitUrl: String = null
  id: Int = null
  name: String = null
  slackBuildsChannelId: String = null
  slackBuildsChannelUrl: String = null
  slackChannelId: String = null
  slackChannelUrl: String = null
  slackErrorsChannelId: String = null
  slackErrorsChannelUrl: String = null
  status: StatusEnum = null
}

type ProjectType {
  awsLogsSlug: String
  createdBy: EmployeeType!
  gitGroupId: String
  gitPlatform: GitPlatformEnum
  gitSlug: String
  gitUrl: String
  id: Int!
  name: String
  slackBuildsChannelId: String
  slackBuildsChannelUrl: String
  slackChannelId: String
  slackChannelUrl: String
  slackErrorsChannelId: String
  slackErrorsChannelUrl: String
  status: StatusEnum
}

type Query {
  """
  Getting list of employees' roles
  """
  departmentsList: [DepartmentType!]!
  """
  Getting list of employees
  """
  employeesList: [EmployeeType!]!
  """
  Getting authenticated user
  """
  me: EmployeeType!
  """
  Getting project by id
  """
  project(data: IDInput!): ProjectType!
  """
  Getting list of projects
  """
  projectsList: [ProjectType!]!
}

input RefreshTokenInput {
  refreshToken: String!
}

enum StatusEnum {
  DESIGN
  FINISHED
  IN_PROGRESS
  ON_HOLD
  STOPPED
  SUPPORT
}
